[{'type': 'LibraryModule', 'name': 'Library_AimmsXLLibrary', 'Interface': 'PublicSection', 'Comment': '"This library allows you to read from and write to .xlsx or .xls (Excel) files.\n        \n        The library does not need Excel to be installed on the machine and works both in Windows and Linux.\n        \n        The library can only read and write the file formats .xlsx and .xls, but is not capable of \n        evaluating any formula or macro that is contained in it. For that you need Excel itself.\n        \n        The functions in this library do not use a return value to indicate success or failure.\n        Instead, the functions are created to be used in combination with the error handling mechanisms in AIMMS.\n        That is why it is highly recommended to place all function calls within a :any:`block-onerror-endblock <block>` context,\n        so that you can easily handle the warnings and errors that might occur during the usage of these\n        functions.\n        \n        A typical usage looks like:\n        \n          .. code::\n        \n            block\n    \n              axll::OpenWorkbook(mybook.xlsx);\n          \n              ! .. read or write the sheets in the workbook ..\n          \n            onerror err do\n          \n              ! .. handle the error or warning ..\n          \n              errh::MarkAsHandled(err);\n          \n            endblock;\n          \n            axll::CloseAllWorkbooks;  ! save and close any open workbook"', 'child': [{'type': 'Section', 'name': 'PrivateSection', 'child': [{'type': 'Function', 'name': 'LibraryDirectory', 'Range': 'string', 'Body': 'if DirectoryOfLibraryProject(libraryName, LibraryDirectory) <> 1 then\n                    LibraryDirectory := libraryName;\n                endif;', 'child': [{'type': 'StringParameter', 'name': 'libraryName', 'child': []}]}, {'type': 'Function', 'name': 'DLLDirectory', 'Range': 'string', 'Body': 'DLLDirectory := LibraryDirectory(libraryName) +"DLL" + if (AimmsStringConstants(\'Platform\') = "Windows") then "\\\\" else "/" endif;', 'child': [{'type': 'StringParameter', 'name': 'libraryName', 'child': []}]}, {'type': 'Function', 'name': 'DLLPath', 'Range': 'string', 'Body': 'DLLPath := DLLDirectory(libraryName) + dllName + if (AimmsStringConstants(\'Platform\') = "Windows") then ".dll" else ".so" endif;', 'child': [{'type': 'StringParameter', 'name': 'libraryName', 'child': []}, {'type': 'StringParameter', 'name': 'dllName', 'child': []}]}, {'type': 'Procedure', 'name': 'PreLibraryTermination', 'Body': '::Library_AimmsXLLibrary::closeAllWorkBooks;\n                return 1;', 'child': []}, {'type': 'Section', 'name': 'CommonDeclarations', 'child': [{'type': 'ElementParameter', 'name': 'STR_ENCODING', 'Property': 'NoSave', 'Definition': 'if AimmsStringConstants(\'Platform\') = "Windows" then\n                        \'UTF-16LE\'\n                    else\n                        \'UTF-32LE\'\n                    endif', 'child': []}, {'type': 'StringParameter', 'name': 'DLL_NAME', 'child': []}]}]}]}]